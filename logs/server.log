--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /logout ---
HEADERS:
BODY:
--- RESPONSE GET /logout ---
HEADERS:
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login">/login</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746408202.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 01:23:22 GMT'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746408202.0-2866-1833634032"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 01:23:22 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746408202.0-2229-1534461966"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 01:23:22 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"TEst1","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"64ebf060-6f3c-4a55-9ae8-4d118010483f"}
--- REQUEST GET /room/64ebf060-6f3c-4a55-9ae8-4d118010483f ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Cache-Control': 'max-age=0', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-2866-1833634032"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-1542-1538525214"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-2229-1534461966"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /stats ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '265', 'Location': '/login?next=http://localhost:8080/stats'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/stats">/login?next=http://localhost:8080/stats</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2229-1534461966"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2866-1833634032"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /login ---
HEADERS:
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3606', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stats and Achievements</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            background: white;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th, td {
            text-align: left;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #007bff;
            color: white;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #e9f5ff;
        }

        .achievements-table th {
            background-color: #28a745;
        }
    </style>
</head>
<body>
    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
        <button onclick="location.href='/'"
            class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
            Back
        </button>
    </div>
    <div class="container">
        <h1>Statistics</h1>
        <table>
            <tbody>
                <tr>
                    <td>Games Played</td>
                    <td>Placeholder1</td>
                </tr>
                <tr>
                    <td>Wins</td>
                    <td>Placeholder2</td>
                </tr>
                <tr>
                    <td>Win Percentage</
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /stats ---
HEADERS:
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3520', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stats and Achievements</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            background: white;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th, td {
            text-align: left;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #007bff;
            color: white;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #e9f5ff;
        }

        .achievements-table th {
            background-color: #28a745;
        }
    </style>
</head>
<body>
    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
        <button onclick="location.href='/'"
            class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
            Back
        </button>
    </div>
    <div class="container">
        <h1>Statistics</h1>
        <table>
            <tbody>
                <tr>
                    <td>Games Played</td>
                    <td>Placeholder1</td>
                </tr>
                <tr>
                    <td>Wins</td>
                    <td>Placeholder2</td>
                </tr>
                <tr>
                    <td>Win Percentage</
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Purpose': 'prefetch;prerender', 'Purpose': 'prefetch', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'none', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413609.0-4104-2161772990"', 'If-Modified-Since': 'Mon, 05 May 2025 02:53:29 GMT'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-2866-1833634032"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-1542-1538525214"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-2229-1534461966"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2229-1534461966"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2866-1833634032"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"t1","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"ee374dd8-f639-4e51-893c-4687f85123cc"}
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Purpose': 'prefetch;prerender', 'Purpose': 'prefetch', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'none', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2229-1534461966"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'If-None-Match': '"1746413519.0-2866-1833634032"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '43', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /register ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '38', 'X-Content-Type-Options': 'nosniff'}
BODY:
{"message":"Username already exists"}
--- REQUEST POST /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '43', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /register ---
HEADERS:
BODY:
{"message":"User registered and logged in successfully"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '69'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Test5"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '69'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Test5"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/64ebf060-6f3c-4a55-9ae8-4d118010483f ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/ee374dd8-f639-4e51-893c-4687f85123cc ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"tzt","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"f73bd630-d3cb-41ca-9f89-f2d459297eec"}
--- REQUEST GET /room/f73bd630-d3cb-41ca-9f89-f2d459297eec ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /room/f73bd630-d3cb-41ca-9f89-f2d459297eec ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET / ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /room/f73bd630-d3cb-41ca-9f89-f2d459297eec ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/f73bd630-d3cb-41ca-9f89-f2d459297eec ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /room/f73bd630-d3cb-41ca-9f89-f2d459297eec ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"ttt","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"b46120a7-00ef-48d2-ad78-e5420afa8fc9"}
--- REQUEST GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
BODY:
--- RESPONSE GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '69'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Test5"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5005'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Room - Within Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
      }

      .back-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .room-list {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 500px;
        overflow-y: auto;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .room {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .room:hover {
        background-color: #333;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300px;
        transform: translate(-50%, -50%);
        background-color: #111;
        border: 2px solid gray;
        border-radius: 10px;
        padding: 20px;
        display: none;
      }

      .popup input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      .popup button {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
      }

      #alert-container {
        position: fixed;
        top: 20px;
        left: 50%;
     
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
BODY:
--- RESPONSE GET /room/b46120a7-00ef-48d2-ad78-e5420afa8fc9 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"ttt","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"724807ef-983b-4dec-905f-e9dad800a5bf"}
--- REQUEST GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
BODY:
--- RESPONSE GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5005'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Room - Within Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
      }

      .back-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .room-list {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 500px;
        overflow-y: auto;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .room {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .room:hover {
        background-color: #333;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300px;
        transform: translate(-50%, -50%);
        background-color: #111;
        border: 2px solid gray;
        border-radius: 10px;
        padding: 20px;
        display: none;
      }

      .popup input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      .popup button {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
      }

      #alert-container {
        position: fixed;
        top: 20px;
        left: 50%;
     
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Map.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Unfinished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Dead Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Finished Task.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Emergency Button.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Character.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /room/724807ef-983b-4dec-905f-e9dad800a5bf ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '69'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Test5"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"final","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"c1f2d10f-e257-4a46-a610-81a0c3c0e631"}
--- REQUEST GET /room/c1f2d10f-e257-4a46-a610-81a0c3c0e631 ---
HEADERS:
BODY:
--- RESPONSE GET /room/c1f2d10f-e257-4a46-a610-81a0c3c0e631 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '69'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Test5"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"final2","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"c5e30d73-0081-4d71-8f78-3cf93e43fe67"}
--- REQUEST GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
BODY:
--- RESPONSE GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5005'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Room - Within Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
      }

      .back-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .room-list {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 500px;
        overflow-y: auto;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .room {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .room:hover {
        background-color: #333;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300px;
        transform: translate(-50%, -50%);
        background-color: #111;
        border: 2px solid gray;
        border-radius: 10px;
        padding: 20px;
        display: none;
      }

      .popup input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      .popup button {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
      }

      #alert-container {
        position: fixed;
        top: 20px;
        left: 50%;
     
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /logout ---
HEADERS:
BODY:
--- RESPONSE GET /logout ---
HEADERS:
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login">/login</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'test/html', 'Content-Length': '5885'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /find-room ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-5190-3095333842"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '273', 'Location': '/login?next=http://localhost:8080/find-room'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/find-room">/login?next=http://localhost:8080/find-room</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'test/html', 'Content-Length': '5885'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Purpose': 'prefetch;prerender', 'Purpose': 'prefetch', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'none', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Purpose': 'prefetch;prerender', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Purpose': 'prefetch', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '19'}
BODY:
<h1>Login Page</h1>
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /register ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '6231', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link 
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Cache-Control': 'max-age=0', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'none', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '277', 'Location': '/login?next=http://localhost:8080/create-room'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/create-room">/login?next=http://localhost:8080/create-room</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/create-room', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/create-room', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/create-room', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/create-room', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '271', 'Location': '/login?next=http://localhost:8080/settings'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/settings">/login?next=http://localhost:8080/settings</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989', 'X-Content-Type-Options': 'nosniff'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5005', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Room - Within Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
      }

      .back-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .room-list {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 500px;
        overflow-y: auto;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .room {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .room:hover {
        background-color: #333;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300px;
        transform: translate(-50%, -50%);
        background-color: #111;
        border: 2px solid gray;
        border-radius: 10px;
        padding: 20px;
        display: none;
      }

      .popup input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      .popup button {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
      }

      #alert-container {
        position: fixed;
        top: 20px;
        left: 50%;
     
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /logout ---
HEADERS:
BODY:
--- RESPONSE GET /logout ---
HEADERS:
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login">/login</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /register ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '6231', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link 
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '271', 'Location': '/login?next=http://localhost:8080/settings'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/settings">/login?next=http://localhost:8080/settings</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /find-room ---
HEADERS:
BODY:
--- RESPONSE GET /find-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5005', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Room - Within Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
      }

      .back-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .room-list {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 500px;
        overflow-y: auto;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .room {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .room:hover {
        background-color: #333;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300px;
        transform: translate(-50%, -50%);
        background-color: #111;
        border: 2px solid gray;
        border-radius: 10px;
        padding: 20px;
        display: none;
      }

      .popup input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
      }

      .popup button {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
      }

      #alert-container {
        position: fixed;
        top: 20px;
        left: 50%;
     
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
BODY:
--- RESPONSE GET /room/c5e30d73-0081-4d71-8f78-3cf93e43fe67 ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262', 'X-Content-Type-Options': 'nosniff'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Test5_model.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Test5_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /public/img/test_model.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Character.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989', 'X-Content-Type-Options': 'nosniff'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '68'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
username=test
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '45', 'X-Content-Type-Options': 'nosniff'}
BODY:
{"message":"No changes needed or submitted"}
--- REQUEST POST /api/user/update ---
HEADERS:
BODY:
------WebKitFormBoundaryamSKaGemKHrdfLc0
Content-Disposition: form-data; name="avatar"; filename="Valorant Screenshot 2025.05.05 - 03.19.48.62.png"
Content-Type: image/png

�PNG

   
IHDR  �  8   g�V   sRGB ��
�   gAMA  ��
�a   	pHYs  �  ��o�d   tEXtSoftware NVIDIA APPq��\   �tEXtDescription {"Source" : "NVIDIA APP", "B64" : "eyJEUlNBcHBOYW1lIiA6ICJ2YWxvcmFudC13aW42NC1zaGlwcGluZy5leGUiLCAiRFJTUHJvZmlsZU5hbWUiIDogIlZhbG9yYW50IiwgIlNob3J0TmFtZSIgOiAidmFsb3JhbnQiLCAiQ21zSWQiIDogMTAxNTI5MjExfQ=="}C)�*  ��IDATx^��	xV�����!6	�=!!$d_�,$$�" Q�� *���^�*���~�ꮨ��[���uo]��ua�ZjU��mն�����g�y�=s������|����5Ϝ9s��<ϙW�����+ߩO.+�Onf/+�7{ugv/�P����nΌ�܌�F��Y�9��9��$>Q�\5ފ{ԶO�R�B�\�>��Z�}����k��a�2�擲�Җ؉

�ݷ0�oqN��,-��#�3Um
s�^5CV�VF�B�mg�G�ǚ+�2��yܹR<
�~N���3��g(�*��-�-*�����'egP����*f�x�"��� 3s��u��-ae�g�g�d�652r�3��(3�);�<;�ܶ�2�Tg(<���@�������|݀���e���b�Ge
,SʭR�����ro�
�P���5�M
�
�i�i�ن�
��,�k�j���9�6sPmƠ����J��3
��;�Y
7=�j�V;H7���^O��T4<�DK��J`K���"*A������M��K[X�ͬ��&��-;W����(���{aM�t�
�^X�^X�}�V�P�ՃI����^XgD���݋��Ø�4z�!��K��X饍i��,z��%ͬn���J[�*�[n�cJ[��[�Csx��r
{�Q�VmNe�aY�i��u�
c5��*ڻU�I�
��^71��j��4�����
�T;��^3.�v�[��n���&�CR�8#:�xX=�[�V�}��H>/~j������m�M�
3>�3s�
��<e��}wi��6lRڰIkGv�K]�N�*�I�v8fFF�x��T�NJ�PJ�h#��n�Z���V�v����'���^���i�m����{Ekz�j��ʌҵ��ն{E��j��4R��v����
�â���s�y�`O�����Jq����˵�Qfŝ����zۜҝ��J<lN/S�^ڪ�4
���b�ݫ�J����{�UIC�!V��w;���(�x(��/�-�wgE�H��Bt^�
>�{�zT�Ȩ
�T=ڨrdF��̪Qf[;!�v4)�n+�vBf =x�ը�ڱٵc3kG��C�*��ɨ
�#�j����2+"ʮ�Si�,��ʩ�&IT���gde�7g�6e�6e��d��d���vj�,�'��B���(�N��5�6	�5П9�6��*s�jd��)sPU�`��R�$�Vһ����ڕ�$Ybe�׆�yU,�c2r���Tm�3V�r�ŋͼ32"uT�Z��g
�b��f�We�U�;\���rn�V�������� >%���~ǅ?��ZY�e��\s����S�مQNnqN^�5
ʵ�vD��q
,ce畃JX�̕���X�"��=��gQ�Ƕ��
�5���)��=�KuϋP%�`Дi�2(�)YY��g���3���VH=j��������
���<�4��TT�)[�A�u򸱒⴪Q��f�)
E�����D�h
V6(9��
 � ��3�>��
z�4�g�fh��@'�tf��
`�R�x5��>ÕBHM :;�+�3����@��Ogl�=P��_��}sC 
N� p��(
��A} Ϳ��K��t�a��!��'�|�'�c��~N�=�@��އ���>�f �5�,���A�g��à�����ݗh��D�ᖅ�r�Up�} 
--- RESPONSE POST /api/user/update ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '43'}
BODY:
{"message":"Profile updated successfully"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '96'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /create-room ---
HEADERS:
BODY:
{"room_name":"tetette","room_type":"public","passcode":"","max_players":"6"}
--- RESPONSE POST /create-room ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '50'}
BODY:
{"roomId":"a1296d95-e8ea-4cde-ab29-64d0f8ecf32a"}
--- REQUEST GET /room/a1296d95-e8ea-4cde-ab29-64d0f8ecf32a ---
HEADERS:
BODY:
--- RESPONSE GET /room/a1296d95-e8ea-4cde-ab29-64d0f8ecf32a ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '11592', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <style>
      body {
        background-color: black;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
        overflow: hidden;
      }

      .top-bar {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        gap: 10px;
      }

      .back-btn,
      .start-btn {
        padding: 8px 16px;
        background-color: gray;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      .start-btn.disabled {
        background-color: #555;
        cursor: not-allowed;
      }

      .lobby-info {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        background-color: rgba(50, 50, 50, 0.8);
        border: 3px solid gray;
        border-radius: 10px;
        padding: 10px;
      }

      .player {
        background-color: #222;
        border: 2px solid gray;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .player-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .player img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }

      .kick-btn {
        padding: 4px 8px;
        background-color: red;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }

      #roomCode {
        margin-top: 10px;
        text-align: center;
      }
    </style>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  </head>
  <body class="bg-black h-screen w-screen overflow-hidden relative">
    <!-- Add a container div that takes up the full screen -->
    <div id="gameContainer" class="relative w-full
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/game.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/game.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '104262', 'X-Content-Type-Options': 'nosniff'}
BODY:
// TODO: For deployment, conditionally use 'wss://' + window.location.host based on 'https://' protocol
// Example: const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
// const socket = io(socketUrl);
const socketUrl = window.location.protocol === 'https:' ? 'wss://' + window.location.host : 'ws://' + window.location.host;
const socket = io(socketUrl, { transports: ['websocket'] }); // Explicitly use WebSocket transport

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// --- Dynamically Create UI Elements ---
function createUI() {
    // --- Back Button --- 
    const backBtn = document.createElement('button');
    backBtn.id = 'back-btn';
    backBtn.innerText = 'Back';
    backBtn.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-4', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-700/80', 'hover:bg-gray-600/90', // Styling
        'text-white', 'font-semibold', 'rounded-md', 'backdrop-blur-sm'
    );
    backBtn.onclick = () => { window.location.href = '/'; };
    backBtn.style.display = 'none'; // Hidden initially
    document.body.appendChild(backBtn);

    // --- Room Code Display ---
    const roomCodeDiv = document.createElement('div');
    roomCodeDiv.id = 'room-code-display';
    roomCodeDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', // Positioning
        'px-4', 'py-2', 'bg-gray-800/70', 'rounded-md', 'backdrop-blur-sm', // Styling
        'text-white', 'font-mono', 'text-sm'
    );
    roomCodeDiv.innerText = 'Room Code: Loading...';
    roomCodeDiv.style.display = 'none'; // Hidden initially
    document.body.appendChild(roomCodeDiv);

    // --- Task Progress Indicator (Top Right) ---
    const taskProgressDiv = document.createElement('div');
    taskProgressDiv.id = 'task-progress';
    taskProgressDiv.classList.add(
        'overlay-element', 'absolute', 'top-4', 'right-4', 'z-50', // Positioning
--- REQUEST GET /public/img/Unfinished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Dead Character.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Map.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Finished Task.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/Emergency Button.png ---
HEADERS:
BODY:
--- REQUEST GET /public/img/test_model.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /create-room ---
HEADERS:
BODY:
--- RESPONSE GET /create-room ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '7472', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Room</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input, .form-box select {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button, .form-box a.button-link {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      text-align: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover, .form-box a.button-link:hover {
      backgroun
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '96'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '96'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /logout ---
HEADERS:
BODY:
--- RESPONSE GET /logout ---
HEADERS:
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login">/login</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /stats ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /stats ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '265', 'Location': '/login?next=http://localhost:8080/stats'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/stats">/login?next=http://localhost:8080/stats</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Cache-Control': 'max-age=0', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/stats', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /register ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '6231', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link 
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '271', 'Location': '/login?next=http://localhost:8080/settings'}
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login?next=http://localhost:8080/settings">/login?next=http://localhost:8080/settings</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9', 'If-None-Match': '"1746413519.0-6106-2338130478"', 'If-Modified-Since': 'Mon, 05 May 2025 02:51:59 GMT'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login?next=http://localhost:8080/settings', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '42', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /login ---
HEADERS:
BODY:
{"message":"Login successful"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '96'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989', 'X-Content-Type-Options': 'nosniff'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '96'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test"}
--- REQUEST GET /public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png ---
HEADERS:
BODY:
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '104'}
BODY:
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '44', 'X-Content-Type-Options': 'nosniff'}
BODY:
--- REQUEST POST /api/user/update ---
HEADERS:
BODY:
------WebKitFormBoundaryxrTdU193H2LV2Wgp
Content-Disposition: form-data; name="avatar"; filename="Valorant Screenshot 2025.05.05 - 03.19.48.62.png"
Content-Type: image/png

�PNG

   
IHDR  �  8   g�V   sRGB ��
�   gAMA  ��
�a   	pHYs  �  ��o�d   tEXtSoftware NVIDIA APPq��\   �tEXtDescription {"Source" : "NVIDIA APP", "B64" : "eyJEUlNBcHBOYW1lIiA6ICJ2YWxvcmFudC13aW42NC1zaGlwcGluZy5leGUiLCAiRFJTUHJvZmlsZU5hbWUiIDogIlZhbG9yYW50IiwgIlNob3J0TmFtZSIgOiAidmFsb3JhbnQiLCAiQ21zSWQiIDogMTAxNTI5MjExfQ=="}C)�*  ��IDATx^��	xV�����!6	�=!!$d_�,$$�" Q�� *���^�*���~�ꮨ��[���uo]��ua�ZjU��mն�����g�y�=s������|����5Ϝ9s��<ϙW�����+ߩO.+�Onf/+�7{ugv/�P����nΌ�܌�F��Y�9��9��$>Q�\5ފ{ԶO�R�B�\�>��Z�}����k��a�2�擲�Җ؉

�ݷ0�oqN��,-��#�3Um
s�^5CV�VF�B�mg�G�ǚ+�2��yܹR<
�~N���3��g(�*��-�-*�����'egP����*f�x�"��� 3s��u��-ae�g�g�d�652r�3��(3�);�<;�ܶ�2�Tg(<���@�������|݀���e���b�Ge
,SʭR�����ro�
�P���5�M
�
�i�i�ن�
��,�k�j���9�6sPmƠ����J��3
��;�Y
7=�j�V;H7���^O��T4<�DK��J`K���"*A������M��K[X�ͬ��&��-;W����(���{aM�t�
�^X�^X�}�V�P�ՃI����^XgD���݋��Ø�4z�!��K��X饍i��,z��%ͬn���J[�*�[n�cJ[��[�Csx��r
{�Q�VmNe�aY�i��u�
c5��*ڻU�I�
��^71��j��4�����
�T;��^3.�v�[��n���&�CR�8#:�xX=�[�V�}��H>/~j������m�M�
3>�3s�
��<e��}wi��6lRڰIkGv�K]�N�*�I�v8fFF�x��T�NJ�PJ�h#��n�Z���V�v����'���^���i�m����{Ekz�j��ʌҵ��ն{E��j��4R��v����
�â���s�y�`O�����Jq����˵�Qfŝ����zۜҝ��J<lN/S�^ڪ�4
���b�ݫ�J����{�UIC�!V��w;���(�x(��/�-�wgE�H��Bt^�
>�{�zT�Ȩ
�T=ڨrdF��̪Qf[;!�v4)�n+�vBf =x�ը�ڱٵc3kG��C�*��ɨ
�#�j����2+"ʮ�Si�,��ʩ�&IT���gde�7g�6e�6e��d��d���vj�,�'��B���(�N��5�6	�5П9�6��*s�jd��)sPU�`��R�$�Vһ����ڕ�$Ybe�׆�yU,�c2r���Tm�3V�r�ŋͼ32"uT�Z��g
�b��f�We�U�;\���rn�V�������� >%���~ǅ?��ZY�e��\s����S�مQNnqN^�5
ʵ�vD��q
,ce畃JX�̕���X�"��=��gQ�Ƕ��
�5���)��=�KuϋP%�`Дi�2(�)YY��g���3���VH=j��������
���<�4��TT�)[�A�u򸱒⴪Q��f�)
E�����D�h
V6(9��
 � ��3�>��
z�4�g�fh��@'�tf��
`�R�x5��>ÕBHM :;�+�3����@��Ogl�=P��_��}sC 
N� p��(
��A} Ϳ��K��t�a��!��'�|�'�c��~N�=�@��އ���>�f �5�,���A�g��à�����ݗh��D�ᖅ�r�Up�} 
--- RESPONSE POST /api/user/update ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '43'}
BODY:
{"message":"Profile updated successfully"}
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '44', 'X-Content-Type-Options': 'nosniff'}
BODY:
--- REQUEST POST /api/user/update ---
HEADERS:
BODY:
------WebKitFormBoundaryahF4b7W4m4d7BHub
Content-Disposition: form-data; name="avatar"; filename="Valorant Screenshot 2025.05.05 - 03.19.48.62.png"
Content-Type: image/png

�PNG

   
IHDR  �  8   g�V   sRGB ��
�   gAMA  ��
�a   	pHYs  �  ��o�d   tEXtSoftware NVIDIA APPq��\   �tEXtDescription {"Source" : "NVIDIA APP", "B64" : "eyJEUlNBcHBOYW1lIiA6ICJ2YWxvcmFudC13aW42NC1zaGlwcGluZy5leGUiLCAiRFJTUHJvZmlsZU5hbWUiIDogIlZhbG9yYW50IiwgIlNob3J0TmFtZSIgOiAidmFsb3JhbnQiLCAiQ21zSWQiIDogMTAxNTI5MjExfQ=="}C)�*  ��IDATx^��	xV�����!6	�=!!$d_�,$$�" Q�� *���^�*���~�ꮨ��[���uo]��ua�ZjU��mն�����g�y�=s������|����5Ϝ9s��<ϙW�����+ߩO.+�Onf/+�7{ugv/�P����nΌ�܌�F��Y�9��9��$>Q�\5ފ{ԶO�R�B�\�>��Z�}����k��a�2�擲�Җ؉

�ݷ0�oqN��,-��#�3Um
s�^5CV�VF�B�mg�G�ǚ+�2��yܹR<
�~N���3��g(�*��-�-*�����'egP����*f�x�"��� 3s��u��-ae�g�g�d�652r�3��(3�);�<;�ܶ�2�Tg(<���@�������|݀���e���b�Ge
,SʭR�����ro�
�P���5�M
�
�i�i�ن�
��,�k�j���9�6sPmƠ����J��3
��;�Y
7=�j�V;H7���^O��T4<�DK��J`K���"*A������M��K[X�ͬ��&��-;W����(���{aM�t�
�^X�^X�}�V�P�ՃI����^XgD���݋��Ø�4z�!��K��X饍i��,z��%ͬn���J[�*�[n�cJ[��[�Csx��r
{�Q�VmNe�aY�i��u�
c5��*ڻU�I�
��^71��j��4�����
�T;��^3.�v�[��n���&�CR�8#:�xX=�[�V�}��H>/~j������m�M�
3>�3s�
��<e��}wi��6lRڰIkGv�K]�N�*�I�v8fFF�x��T�NJ�PJ�h#��n�Z���V�v����'���^���i�m����{Ekz�j��ʌҵ��ն{E��j��4R��v����
�â���s�y�`O�����Jq����˵�Qfŝ����zۜҝ��J<lN/S�^ڪ�4
���b�ݫ�J����{�UIC�!V��w;���(�x(��/�-�wgE�H��Bt^�
>�{�zT�Ȩ
�T=ڨrdF��̪Qf[;!�v4)�n+�vBf =x�ը�ڱٵc3kG��C�*��ɨ
�#�j����2+"ʮ�Si�,��ʩ�&IT���gde�7g�6e�6e��d��d���vj�,�'��B���(�N��5�6	�5П9�6��*s�jd��)sPU�`��R�$�Vһ����ڕ�$Ybe�׆�yU,�c2r���Tm�3V�r�ŋͼ32"uT�Z��g
�b��f�We�U�;\���rn�V�������� >%���~ǅ?��ZY�e��\s����S�مQNnqN^�5
ʵ�vD��q
,ce畃JX�̕���X�"��=��gQ�Ƕ��
�5���)��=�KuϋP%�`Дi�2(�)YY��g���3���VH=j��������
���<�4��TT�)[�A�u򸱒⴪Q��f�)
E�����D�h
V6(9��
 � ��3�>��
z�4�g�fh��@'�tf��
`�R�x5��>ÕBHM :;�+�3����@��Ogl�=P��_��}sC 
N� p��(
��A} Ϳ��K��t�a��!��'�|�'�c��~N�=�@��އ���>�f �5�,���A�g��à�����ݗh��D�ᖅ�r�Up�} 
--- RESPONSE POST /api/user/update ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '43'}
BODY:
{"message":"Profile updated successfully"}
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '78', 'X-Content-Type-Options': 'nosniff'}
BODY:
--- REQUEST POST /api/user/update ---
HEADERS:
BODY:
------WebKitFormBoundaryB4NKhpOYMBQzCq7B
Content-Disposition: form-data; name="avatar"; filename="Valorant Screenshot 2025.05.05 - 03.19.48.62.png"
Content-Type: image/png

�PNG

   
IHDR  �  8   g�V   sRGB ��
�   gAMA  ��
�a   	pHYs  �  ��o�d   tEXtSoftware NVIDIA APPq��\   �tEXtDescription {"Source" : "NVIDIA APP", "B64" : "eyJEUlNBcHBOYW1lIiA6ICJ2YWxvcmFudC13aW42NC1zaGlwcGluZy5leGUiLCAiRFJTUHJvZmlsZU5hbWUiIDogIlZhbG9yYW50IiwgIlNob3J0TmFtZSIgOiAidmFsb3JhbnQiLCAiQ21zSWQiIDogMTAxNTI5MjExfQ=="}C)�*  ��IDATx^��	xV�����!6	�=!!$d_�,$$�" Q�� *���^�*���~�ꮨ��[���uo]��ua�ZjU��mն�����g�y�=s������|����5Ϝ9s��<ϙW�����+ߩO.+�Onf/+�7{ugv/�P����nΌ�܌�F��Y�9��9��$>Q�\5ފ{ԶO�R�B�\�>��Z�}����k��a�2�擲�Җ؉

�ݷ0�oqN��,-��#�3Um
s�^5CV�VF�B�mg�G�ǚ+�2��yܹR<
�~N���3��g(�*��-�-*�����'egP����*f�x�"��� 3s��u��-ae�g�g�d�652r�3��(3�);�<;�ܶ�2�Tg(<���@�������|݀���e���b�Ge
,SʭR�����ro�
�P���5�M
�
�i�i�ن�
��,�k�j���9�6sPmƠ����J��3
��;�Y
7=�j�V;H7���^O��T4<�DK��J`K���"*A������M��K[X�ͬ��&��-;W����(���{aM�t�
�^X�^X�}�V�P�ՃI����^XgD���݋��Ø�4z�!��K��X饍i��,z��%ͬn���J[�*�[n�cJ[��[�Csx��r
{�Q�VmNe�aY�i��u�
c5��*ڻU�I�
��^71��j��4�����
�T;��^3.�v�[��n���&�CR�8#:�xX=�[�V�}��H>/~j������m�M�
3>�3s�
��<e��}wi��6lRڰIkGv�K]�N�*�I�v8fFF�x��T�NJ�PJ�h#��n�Z���V�v����'���^���i�m����{Ekz�j��ʌҵ��ն{E��j��4R��v����
�â���s�y�`O�����Jq����˵�Qfŝ����zۜҝ��J<lN/S�^ڪ�4
���b�ݫ�J����{�UIC�!V��w;���(�x(��/�-�wgE�H��Bt^�
>�{�zT�Ȩ
�T=ڨrdF��̪Qf[;!�v4)�n+�vBf =x�ը�ڱٵc3kG��C�*��ɨ
�#�j����2+"ʮ�Si�,��ʩ�&IT���gde�7g�6e�6e��d��d���vj�,�'��B���(�N��5�6	�5П9�6��*s�jd��)sPU�`��R�$�Vһ����ڕ�$Ybe�׆�yU,�c2r���Tm�3V�r�ŋͼ32"uT�Z��g
�b��f�We�U�;\���rn�V�������� >%���~ǅ?��ZY�e��\s����S�مQNnqN^�5
ʵ�vD��q
,ce畃JX�̕���X�"��=��gQ�Ƕ��
�5���)��=�KuϋP%�`Дi�2(�)YY��g���3���VH=j��������
���<�4��TT�)[�A�u򸱒⴪Q��f�)
E�����D�h
V6(9��
 � ��3�>��
z�4�g�fh��@'�tf��
`�R�x5��>ÕBHM :;�+�3����@��Ogl�=P��_��}sC 
N� p��(
��A} Ϳ��K��t�a��!��'�|�'�c��~N�=�@��އ���>�f �5�,���A�g��à�����ݗh��D�ᖅ�r�Up�} 
--- RESPONSE POST /api/user/update ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '43'}
BODY:
{"message":"Profile updated successfully"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '98'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test12"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989', 'X-Content-Type-Options': 'nosniff'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '98'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test12"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png ---
HEADERS:
BODY:
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '98'}
BODY:
{"avatar_url":"/public/img/Valorant_Screenshot_2025.05.05_-_03.19.48.62.png","username":"test12"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /logout ---
HEADERS:
BODY:
--- RESPONSE GET /logout ---
HEADERS:
BODY:
<!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/login">/login</a>. If not, click the link.
--- REQUEST GET /login ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /login ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '5885', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link a {
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET / ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/login', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/auto.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '32'}
BODY:
{"message":"Not authenticated"}
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"Windows"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Referer': 'http://localhost:8080/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE GET /register ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '6231', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
    }

    .top-left {
      position: absolute;
      top: 20px;
      left: 20px;
    }

    .top-left a {
      padding: 8px 16px;
      font-size: 14px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .top-left a:hover {
      background-color: #666;
    }

    .form-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }

    .form-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 20px #333;
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 320px;
    }

    .form-box h1 {
      text-align: center;
      margin: 0;
      font-size: 28px;
    }

    .form-box input {
      padding: 10px;
      font-size: 16px;
      border: 2px solid #888;
      border-radius: 8px;
      background-color: #2a2a2a;
      color: white;
    }

    .form-box label {
      font-size: 16px;
    }

    .form-box button {
      padding: 10px;
      font-size: 16px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .form-box button:hover {
      background-color: #666;
    }

    .form-box .small-link {
      font-size: 13px;
      text-align: center;
    }

    .form-box .small-link 
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/home.js ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Origin': 'http://localhost:8080', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'script', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /favicon.ico ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'no-cors', 'Sec-Fetch-Dest': 'image', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /register ---
HEADERS:
{'Host': 'localhost:8080', 'Connection': 'keep-alive', 'Content-Length': '44', 'Sec-Ch-Ua-Platform': '"Windows"', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Sec-Ch-Ua': '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Accept': '*/*', 'Origin': 'http://localhost:8080', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:8080/register', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'en-US,en;q=0.9'}
--- RESPONSE POST /register ---
HEADERS:
BODY:
{"message":"User registered and logged in successfully"}
--- REQUEST GET / ---
HEADERS:
BODY:
--- RESPONSE GET / ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3947', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Within Us - Home</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: radial-gradient(ellipse at bottom, #0d0d0d 0%, #000000 100%);
      font-family: 'Arial', sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .top-right-buttons {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
    }

    .small-button {
      padding: 6px 14px;
      font-size: 14px;
      background-color: #444;
      color: white;
      border: 2px solid #888;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .small-button:hover {
      background-color: #666;
    }

    .menu-box {
      background-color: #1a1a1a;
      border: 5px solid #888;
      padding: 40px;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      box-shadow: 0 0 20px #333;
    }

    .menu-box h1 {
      margin: 0;
      font-size: 36px;
    }

    .menu-button {
      padding: 12px 30px;
      font-size: 18px;
      font-weight: bold;
      background-color: #444;
      color: white;
      border: 3px solid #888;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .menu-button:hover {
      background-color: #666;
    }

    #alert-container {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      gap: 10px;
      z-index: 1000;
      max-width: 90vw;
    }

    .bottom-left-stats {
      position: absolute;
      bottom: 20px;
      left: 20px;
      font-size: 14px;
      color: #ccc;
      line-height: 1.6;
    }

    /* Style for Login/Register/Logout buttons generated by auto.js */
    .auth-button {
      display: inline-block; /* Make links behave like buttons */
      pad
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '70'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Spider"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST GET /settings ---
HEADERS:
BODY:
--- RESPONSE GET /settings ---
HEADERS:
{'Content-Type': 'text/html', 'Content-Length': '3205', 'X-Content-Type-Options': 'nosniff'}
BODY:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Settings</title>
    <!-- Removed inline styles, using Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="/public/js/alerts.js" type="module"></script>
  </head>
  <body class="bg-black text-white font-sans overflow-hidden">
    <!-- Alert Container -->
    <div id="alert-container"
      class="fixed top-4 left-1/2 -translate-x-1/2 z-50 w-auto max-w-[90%] flex flex-col gap-2"></div>

    <!-- Top Bar with Back Button -->
    <div class="absolute top-3 left-3">
      <button onclick="location.href='/'"
        class="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold cursor-pointer">
        Back
      </button>
    </div>

    <!-- Settings Container -->
    <div
      class="absolute top-[60px] left-1/2 -translate-x-1/2 w-[500px] max-w-[95%] bg-gray-900 rounded-lg p-5 flex flex-col items-center gap-5 shadow-md shadow-neutral-600">
      <!-- Profile Picture - ID matches JS -->
      <img id="avatar-preview"
        class="w-24 h-24 rounded-full object-cover cursor-pointer border-2 border-gray-600 hover:border-gray-500"
        src="/public/img/default_avatar.webp" alt="User profile picture" title="Click to change profile picture" />
      <input type="file" id="avatar" name="avatar" accept="image/*" class="hidden" />

      <!-- Settings Form -->
      <form id="settings-form" class="w-full flex flex-col items-center gap-4">
        <!-- Username Field -->
        <div class="w-4/5">
          <label for="username" class="block mb-1 text-sm font-medium text-gray-300">Username</label>
          <input id="username" type="text" title="Enter your desired username"
            class="w-full px-3 py-2 border-2 border-gray-700 bg-gray-800 text-white text-base rounded focus:outli
--- REQUEST GET /public/img/default_avatar.webp ---
HEADERS:
BODY:
--- REQUEST GET /public/js/alerts.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/home.js ---
HEADERS:
BODY:
--- REQUEST GET /public/js/auto.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/home.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2165', 'X-Content-Type-Options': 'nosniff'}
BODY:
import { AlertManager } from '/public/js/alerts.js'

// Initialize AlertManager and showAlert after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const alertContainer = document.getElementById("alert-container");
  if (alertContainer) {
    // Create instance and attach to window if needed globally
    window.alertManager = new AlertManager(alertContainer);
    // Define showAlert globally
    window.showAlert = (...args) => window.alertManager.newAlert(...args);
    // console.log("AlertManager initialized from home.js."); // Removed unwanted log
  } else {
    console.error("Alert container element not found!");
  }
});

// showAlert will be defined in the HTML after DOMContentLoaded
// window.showAlert = (...args) => alertManager.newAlert(...args)

async function checkLogin() {
  try {
    const res = await fetch('/check_login')
    // We should rely on auto.js and /api/users/@me for login status
    // Remove this function or update endpoint if it's actually needed.
    // For now, commenting out the logic that depends on it.
    /*
    if (res.ok) {
      const data = await res.json()
      if (data.loggedIn) {
        // This logic is now handled by auto.js
        // document.getElementById('loginBtn').style.display = 'none'
        // document.getElementById('registerBtn').style.display = 'none'
        // document.getElementById('logoutBtn').style.display = 'inline-block'
      }
    }
    */
  } catch (e) {
    console.error('Error checking login:', e)
  }
}

// Logout function is defined in home.html now
/*
async function logout() {
  try {
    const res = await fetch('/logout', { method: 'POST' })
    if (res.ok) {
      location.reload()
    } else {
      // Use the globally defined showAlert if available
      if (window.showAlert) window.showAlert('Logout failed.', 'error')
      else alert('Logout failed.')
    }
  } catch (e) {
    console.error(e)
    if (window.showAlert) window.showAlert('Logout error.', 'error')
    else alert('Logout error.')
  }
}
*/

// Remove chec
--- RESPONSE GET /public/js/alerts.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2774', 'X-Content-Type-Options': 'nosniff'}
BODY:
class AlertManager {
  constructor() {
    const container = document.querySelector("#alert-container");
    if (!container) {
      throw new Error(
        "Alert container element with id 'alert-container' not found!"
      );
    }
    this.container = container;
    this.alerts = new Map();
  }

  newAlert(message, type = "info", duration = 5000, title = "Alert") {
    const id = crypto.randomUUID();
    const alertElement = this.createAlertElement(id, message, type, title);

    this.container.append(alertElement);
    this.alerts.set(id, alertElement);

    if (duration > 0) {
      setTimeout(() => this.removeAlert(id), duration);
    }

    return id;
  }

  removeAlert(id) {
    const alert = this.alerts.get(id);
    if (alert) {
      alert.classList.add("opacity-0");
      setTimeout(() => {
        alert.remove();
        this.alerts.delete(id);
      }, 300);
    }
  }

  clearAlerts() {
    this.alerts.forEach((_, id) => this.removeAlert(id));
  }

  getIconForType(type) {
    switch (type) {
      case "success":
        return "check-circle";
      case "error":
        return "alert-circle";
      case "warning":
        return "alert-triangle";
      default:
        return "info";
    }
  }

  createAlertElement(id, message, type = "info", title = "Alert") {
    const colorClasses = {
      success: "border-green-500 [&_svg]:text-green-500 [&_h3]:text-green-500",
      error: "border-red-500 [&_svg]:text-red-500 [&_h3]:text-red-500",
      info: "border-blue-500 [&_svg]:text-blue-500 [&_h3]:text-blue-500",
      warning: "border-yellow-500 [&_svg]:text-yellow-500 [&_h3]:text-yellow-500",
    };

    const alert = document.createElement("div");
    alert.className = `opacity-0 transition-all duration-300 transform translate-y-[-1rem] p-4 bg-primary border-2 rounded-lg shadow-lg flex flex-col gap-2 max-w-md w-auto mx-auto ${colorClasses[type]}`;
    alert.id = id;

    alert.innerHTML = `
      <div class="flex justify-between items-center mb-2">
        <div class="flex items-center gap-3">
   
--- REQUEST GET /public/js/settings.js ---
HEADERS:
BODY:
--- RESPONSE GET /public/js/settings.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '2989', 'X-Content-Type-Options': 'nosniff'}
BODY:
let storedUserSettings;

async function fetchUserSettings() {
  try {
    const response = await fetch("/api/users/@me");

    if (response.status === 401) {
      window.location.href = "/login";
      return;
    }

    if (!response.ok) {
      const errorText = await response.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Error");
      return;
    }

    const body = await response.json();
    storedUserSettings = body;

    if (body.username) {
      document.getElementById("username").value = body.username;
    }

    if (body.avatar_url) {
      document.getElementById("avatar-preview").src = body.avatar_url;
    }
  } catch {
    alertManager.newAlert(
      "Failed to fetch user settings. Please try again.",
      "error",
      5000,
      "Settings Error"
    );
  }
}

const avatarInput = document.getElementById("avatar");
const avatarPreview = document.getElementById("avatar-preview");

avatarPreview.addEventListener("click", () => avatarInput.click());

avatarInput.addEventListener("change", () => {
  const file = avatarInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      avatarPreview.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

async function handleSubmit(event) {
  event.preventDefault();

  const username = document.getElementById("username").value;
  const avatar = avatarInput.files[0];

  const urlEncodedData = new URLSearchParams();
  urlEncodedData.append("username", username);

  try {
    const settingsResponse = await fetch("/api/users/settings", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: urlEncodedData,
    });

    if (!settingsResponse.ok) {
      const errorText = await settingsResponse.text();
      alertManager.newAlert(errorText, "error", 5000, "Settings Update Error");
      return;
    }
  } catch
--- RESPONSE GET /public/js/auto.js ---
HEADERS:
{'Content-Type': 'text/javascript', 'Content-Length': '1497', 'X-Content-Type-Options': 'nosniff'}
BODY:
document.addEventListener('DOMContentLoaded', function() {
    const userStatusDiv = document.getElementById('user-status');

    if (userStatusDiv) {
        fetch('/api/users/@me')
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // Not logged in or error
                    throw new Error('Not logged in');
                }
            })
            .then(data => {
                // User is logged in
                userStatusDiv.innerHTML = `
                    <span>Logged in as: <strong>${escapeHTML(data.username)}</strong></span>
                    <a href="/logout" class="auth-button">Logout</a>
                `;
            })
            .catch(error => {
                // User is not logged in
                userStatusDiv.innerHTML = `
                    <a href="/login" class="auth-button">Login</a>
                    <a href="/register" class="auth-button">Register</a>
                `;
                console.log('User not logged in or API error:', error.message);
            });
    }
});

// Simple HTML escaping function to prevent XSS
function escapeHTML(str) {
    return str.replace(/[&<>'"/]/g, function (s) {
        const entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return entityMap[s];
    });
}
--- REQUEST GET /api/users/@me ---
HEADERS:
BODY:
--- RESPONSE GET /api/users/@me ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '70'}
BODY:
{"avatar_url":"./public/img/default_avatar.webp","username":"Spider"}
--- REQUEST GET /favicon.ico ---
HEADERS:
BODY:
--- RESPONSE GET /favicon.ico ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '34'}
BODY:
{"error":"Internal server error"}
--- REQUEST POST /api/users/settings ---
HEADERS:
BODY:
--- RESPONSE POST /api/users/settings ---
HEADERS:
{'Content-Type': 'application/json', 'Content-Length': '44', 'X-Content-Type-Options': 'nosniff'}
BODY:
